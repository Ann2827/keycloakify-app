{"version":3,"sources":["components/Input/Input.module.scss","tos_en.md","tos_fr.md","kcMessagesExtension.ts","utils/headInsert.ts","pages/Template.tsx","components/Input/Input.tsx","pages/Login.tsx","pages/Register.tsx","pages/RegisterUserProfile.tsx","pages/Info.tsx","pages/Error.tsx","pages/LoginResetPassword.tsx","pages/LoginVerifyEmail.tsx","pages/Terms.tsx","pages/LoginOtp.tsx","pages/LoginUpdateProfile.tsx","pages/LoginIdpLinkConfirm.tsx","pages/KcApp.tsx","index.tsx"],"names":["module","exports","Object","assign","kcMessages","headInsert","params","HTMLElement","prototype","prepend","childNode","Error","this","insertBefore","firstChild","htmlElement","document","createElement","type","dLoaded","Deferred","addEventListener","resolve","href","src","getElementsByTagName","position","pr","Template","memo","props","displayInfo","displayMessage","displayRequiredFields","displayWide","showAnotherWayIfPresent","headerNode","showUsernameNode","formNode","infoNode","kcContext","doFetchDefaultThemeResources","cx","useCssAndCx","useEffect","console","log","msg","useKcMessage","useKcLanguageTag","kcLanguageTag","setKcLanguageTag","onChangeLanguageClickFactory","useCallbackFactory","languageTag","onTryAnotherWayClick","useConstCallback","forms","submit","realm","locale","auth","url","message","isAppInitiatedAction","internationalizationEnabled","assert","undefined","getBestMatchAmongKcLanguageTag","current","window","location","supported","find","useReducer","isExtraCssLoaded","setExtraCssLoaded","isUnmounted","cleanups","toArr","x","split","Promise","all","stylesCommon","map","relativePath","pathJoin","resourcesCommonPath","styles","resourcesPath","reverse","then","scripts","forEach","kcHtmlClass","htmlClassList","classList","tokens","add","push","remove","f","className","kcLoginClass","id","kcHeaderClass","kcHeaderWrapperClass","displayNameHtml","kcFormCardClass","kcFormCardAccountClass","kcFormHeaderClass","length","kcLocaleWrapperClass","getKcLanguageTagLabel","onClick","showUsername","showResetCredentials","kcContentWrapperClass","kcLabelWrapperClass","kcFormGroupClass","attemptedUsername","loginRestartFlowUrl","kcResetFlowIcon","kcFeedbackSuccessIcon","kcFeedbackWarningIcon","kcFeedbackErrorIcon","kcFeedbackInfoIcon","dangerouslySetInnerHTML","summary","showTryAnotherWayLink","action","loginAction","method","kcFormSocialAccountContentClass","kcFormSocialAccountClass","name","value","kcSignUpClass","kcInfoAreaWrapperClass","Input","tabIndex","onChange","placeholder","disabled","onFocus","onBlur","useState","isFocused","setIsFocused","rootClass","classNames","root","placeholderClass","focus","inputClass","input","otherProps","event","defaultProps","React","Login","social","usernameEditDisabled","login","registrationDisabled","msgStr","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","username","setUsername","placeholderU","loginWithEmailAllowed","registrationEmailAsUsername","password","setPassword","providers","target","kcFormSettingClass","rememberMe","kcFormOptionsWrapperClass","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","kcButtonClass","kcButtonPrimaryClass","kcButtonBlockClass","kcButtonLargeClass","kcFormSocialAccountListClass","kcFormSocialAccountDoubleListClass","p","kcFormSocialAccountListLinkClass","loginUrl","alias","providerId","displayName","registrationAllowed","registrationUrl","Register","messagesPerField","register","passwordRequired","recaptchaRequired","recaptchaSiteKey","kcFormClass","registrationAction","printIfExists","kcFormGroupErrorClass","htmlFor","kcLabelClass","kcInputWrapperClass","kcInputClass","defaultValue","formData","firstName","lastName","email","autoComplete","kcFormOptionsClass","kcFormButtonsClass","RegisterUserProfile","props_","css","useMemo","isFomSubmittable","setIsFomSubmittable","exists","UserProfileFormFields","onIsFormSubmittableValueChange","advancedMsg","useFormValidationSlice","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationReducer","attributesWithPassword","onChangeFactory","onBlurFactory","currentGroup","attribute","i","group","groupDisplayHeader","groupDisplayDescription","displayableErrors","formGroupClassName","kcFormGroupHeader","required","readOnly","autocomplete","kcInputErrorMessageClass","errorMessage","Info","messageHeader","requiredActions","skipLink","pageRedirectUri","actionUri","client","requiredAction","join","baseUrl","LoginResetPassword","autoFocus","LoginVerifyEmail","Terms","kcButtonDefaultClass","LoginOtp","otpLogin","isCleanedUp","$","ready","click","hasClass","removeClass","children","removeAttr","addClass","attr","defaultCred","userOtpCredentials","otpCredential","kcSelectOTPListClass","kcSelectOTPListItemClass","kcAuthenticatorOtpCircleClass","kcSelectOTPItemHeadingClass","userLabel","LoginUpdateProfile","user","editUsernameAllowed","LoginIdpLinkConfirm","idpAlias","KcApp","pageId","getKcContext","termsTitle","fetch","tos_fr_url","tos_en_url","response","text","rawMarkdown","termsText","defaultKcProps","render","getElementById"],"mappings":"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","file":"static/js/main.42d5923b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Input_root__2tE1E\",\"input\":\"Input_input__3rPb3\",\"placeholder\":\"Input_placeholder__1C_MM\",\"focus\":\"Input_focus__2D2k7\"};","export default __webpack_public_path__ + \"static/media/tos_en.c09b3947.md\";","export default __webpack_public_path__ + \"static/media/tos_fr.e2782512.md\";","\nimport { kcMessages } from \"keycloakify/lib/i18n/useKcMessage\";\n\nObject.assign(\n\tkcMessages[\"fr\"],\n\t{\n\t\t/* spell-checker: disable */\n\t\t\"foo\": \"foo en Francais\",\n\t\t/* spell-checker: enable */\n\t}\n);\n\nObject.assign(\n\tkcMessages[\"en\"],\n\t{\n\t\t\"foo\": \"foo in English\",\n\t}\n);\n\n","import { Deferred } from \"evt/tools/Deferred\";\n\nexport function headInsert(\n    params:\n        | {\n              type: \"css\";\n              href: string;\n              position: \"append\" | \"prepend\";\n          }\n        | {\n              type: \"javascript\";\n              src: string;\n          },\n) {\n  if (!HTMLElement.prototype.prepend) {\n    HTMLElement.prototype.prepend = function (childNode) {\n      if (typeof childNode === \"string\") {\n        throw new Error(\"Error with HTMLElement.prototype.appendFirst polyfill\");\n      }\n\n      this.insertBefore(childNode, this.firstChild);\n    };\n  }\n\n    const htmlElement = document.createElement(\n        (() => {\n            switch (params.type) {\n                case \"css\":\n                    return \"link\";\n                case \"javascript\":\n                    return \"script\";\n            }\n        })(),\n    );\n\n    const dLoaded = new Deferred<void>();\n\n    htmlElement.addEventListener(\"load\", () => dLoaded.resolve());\n\n    Object.assign(\n        htmlElement,\n        (() => {\n            switch (params.type) {\n                case \"css\":\n                    return {\n                        \"href\": params.href,\n                        \"type\": \"text/css\",\n                        \"rel\": \"stylesheet\",\n                        \"media\": \"screen,print\",\n                    };\n                case \"javascript\":\n                    return {\n                        \"src\": params.src,\n                        \"type\": \"text/javascript\",\n                    };\n            }\n        })(),\n    );\n\n    document.getElementsByTagName(\"head\")[0][\n        (() => {\n            switch (params.type) {\n                case \"javascript\":\n                    return \"appendChild\";\n                case \"css\":\n                    return (() => {\n                        switch (params.position) {\n                            case \"append\":\n                                return \"appendChild\";\n                            case \"prepend\":\n                                return \"prepend\";\n                        }\n                    })();\n            }\n        })()\n    ](htmlElement);\n\n    return dLoaded.pr;\n}\n","import { useReducer, useEffect, memo } from \"react\";\nimport type { ReactNode } from \"react\";\nimport { useKcMessage, useKcLanguageTag, assert, getBestMatchAmongKcLanguageTag, getKcLanguageTagLabel } from \"keycloakify\";\nimport type { KcContextBase, KcLanguageTag, KcTemplateProps } from \"keycloakify\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\nimport { headInsert } from \"../utils\";\nimport { join as pathJoin } from \"path\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport type TemplateProps = {\n    displayInfo?: boolean;\n    displayMessage?: boolean;\n    displayRequiredFields?: boolean;\n    displayWide?: boolean;\n    showAnotherWayIfPresent?: boolean;\n    headerNode: ReactNode;\n    showUsernameNode?: ReactNode;\n    formNode: ReactNode;\n    infoNode?: ReactNode;\n    /** If you write your own page you probably want\n     * to avoid pulling the default theme assets.\n     */\n    doFetchDefaultThemeResources: boolean;\n} & { kcContext: KcContextBase } & KcTemplateProps;\n\nexport const Template = memo((props: TemplateProps) => {\n    const {\n        displayInfo = false,\n        displayMessage = true,\n        displayRequiredFields = false,\n        displayWide = false,\n        showAnotherWayIfPresent = true,\n        headerNode,\n        showUsernameNode = null,\n        formNode,\n        infoNode = null,\n        kcContext,\n        doFetchDefaultThemeResources,\n    } = props;\n\n    const { cx } = useCssAndCx();\n\n    useEffect(() => {\n        console.log(\"Rendering this page with react using keycloakify\");\n    }, []);\n\n    const { msg } = useKcMessage();\n\n    const { kcLanguageTag, setKcLanguageTag } = useKcLanguageTag();\n\n    const onChangeLanguageClickFactory = useCallbackFactory(([languageTag]: [KcLanguageTag]) => setKcLanguageTag(languageTag));\n\n    const onTryAnotherWayClick = useConstCallback(() => (document.forms[\"kc-select-try-another-way-form\" as never].submit(), false));\n\n    const { realm, locale, auth, url, message, isAppInitiatedAction } = kcContext;\n\n    useEffect(() => {\n        if (!realm.internationalizationEnabled) {\n            return;\n        }\n\n        assert(locale !== undefined);\n\n        if (kcLanguageTag === getBestMatchAmongKcLanguageTag(locale.current)) {\n            return;\n        }\n\n        window.location.href = locale.supported.find(({ languageTag }) => languageTag === kcLanguageTag)!.url;\n    }, [kcLanguageTag]);\n\n    const [isExtraCssLoaded, setExtraCssLoaded] = useReducer(() => true, false);\n\n    useEffect(() => {\n        if (!doFetchDefaultThemeResources) {\n            setExtraCssLoaded();\n            return;\n        }\n\n        let isUnmounted = false;\n        const cleanups: (() => void)[] = [];\n\n        const toArr = (x: string | readonly string[] | undefined) => (typeof x === \"string\" ? x.split(\" \") : x ?? []);\n\n        Promise.all(\n            [\n                ...toArr(props.stylesCommon).map(relativePath => pathJoin(url.resourcesCommonPath, relativePath)),\n                ...toArr(props.styles).map(relativePath => pathJoin(url.resourcesPath, relativePath)),\n            ]\n                .reverse()\n                .map(href =>\n                    headInsert({\n                        \"type\": \"css\",\n                        href,\n                        \"position\": \"prepend\",\n                    }),\n                ),\n        ).then(() => {\n            if (isUnmounted) {\n                return;\n            }\n\n            setExtraCssLoaded();\n        });\n\n        toArr(props.scripts).forEach(relativePath =>\n            headInsert({\n                \"type\": \"javascript\",\n                \"src\": pathJoin(url.resourcesPath, relativePath),\n            }),\n        );\n\n        if (props.kcHtmlClass !== undefined) {\n            const htmlClassList = document.getElementsByTagName(\"html\")[0].classList;\n\n            const tokens = cx(props.kcHtmlClass).split(\" \");\n\n            htmlClassList.add(...tokens);\n\n            cleanups.push(() => htmlClassList.remove(...tokens));\n        }\n\n        return () => {\n            isUnmounted = true;\n\n            cleanups.forEach(f => f());\n        };\n    }, [props.kcHtmlClass]);\n\n    if (!isExtraCssLoaded) {\n        return null;\n    }\n\n    return (\n        <div className={cx(props.kcLoginClass)}>\n            <div id=\"kc-header\" className={cx(props.kcHeaderClass)}>\n                <div id=\"kc-header-wrapper\" className={cx(props.kcHeaderWrapperClass)}>\n                    {msg(\"loginTitleHtml\", realm.displayNameHtml)}\n                </div>\n            </div>\n\n            <div className={cx(props.kcFormCardClass, displayWide && props.kcFormCardAccountClass)}>\n                <header className={cx(props.kcFormHeaderClass)}>\n                    {realm.internationalizationEnabled && (assert(locale !== undefined), true) && locale.supported.length > 1 && (\n                        <div id=\"kc-locale\">\n                            <div id=\"kc-locale-wrapper\" className={cx(props.kcLocaleWrapperClass)}>\n                                <div className=\"kc-dropdown\" id=\"kc-locale-dropdown\">\n                                    <a href=\"#\" id=\"kc-current-locale-link\">\n                                        {getKcLanguageTagLabel(kcLanguageTag)}\n                                    </a>\n                                    <ul>\n                                        {locale.supported.map(({ languageTag }) => (\n                                            <li key={languageTag} className=\"kc-dropdown-item\">\n                                                <a href=\"#\" onClick={onChangeLanguageClickFactory(languageTag)}>\n                                                    {getKcLanguageTagLabel(languageTag)}\n                                                </a>\n                                            </li>\n                                        ))}\n                                    </ul>\n                                </div>\n                            </div>\n                        </div>\n                    )}\n                    {!(auth !== undefined && auth.showUsername && !auth.showResetCredentials) ? (\n                        displayRequiredFields ? (\n                            <div className={cx(props.kcContentWrapperClass)}>\n                                <div className={cx(props.kcLabelWrapperClass, \"subtitle\")}>\n                                    <span className=\"subtitle\">\n                                        <span className=\"required\">*</span>\n                                        {msg(\"requiredFields\")}\n                                    </span>\n                                </div>\n                                <div className=\"col-md-10\">\n                                    <h1 id=\"kc-page-title\">{headerNode}</h1>\n                                </div>\n                            </div>\n                        ) : (\n                            <h1 id=\"kc-page-title\">{headerNode}</h1>\n                        )\n                    ) : displayRequiredFields ? (\n                        <div className={cx(props.kcContentWrapperClass)}>\n                            <div className={cx(props.kcLabelWrapperClass, \"subtitle\")}>\n                                <span className=\"subtitle\">\n                                    <span className=\"required\">*</span> {msg(\"requiredFields\")}\n                                </span>\n                            </div>\n                            <div className=\"col-md-10\">\n                                {showUsernameNode}\n                                <div className={cx(props.kcFormGroupClass)}>\n                                    <div id=\"kc-username\">\n                                        <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                                        <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                                            <div className=\"kc-login-tooltip\">\n                                                <i className={cx(props.kcResetFlowIcon)}></i>\n                                                <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                            </div>\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <>\n                            {showUsernameNode}\n                            <div className={cx(props.kcFormGroupClass)}>\n                                <div id=\"kc-username\">\n                                    <label id=\"kc-attempted-username\">{auth?.attemptedUsername}</label>\n                                    <a id=\"reset-login\" href={url.loginRestartFlowUrl}>\n                                        <div className=\"kc-login-tooltip\">\n                                            <i className={cx(props.kcResetFlowIcon)}></i>\n                                            <span className=\"kc-tooltip-text\">{msg(\"restartLoginTooltip\")}</span>\n                                        </div>\n                                    </a>\n                                </div>\n                            </div>\n                        </>\n                    )}\n                </header>\n                <div id=\"kc-content\">\n                    <div id=\"kc-content-wrapper\">\n                        {/* App-initiated actions should not see warning messages about the need to complete the action during login. */}\n                        {displayMessage && message !== undefined && (message.type !== \"warning\" || !isAppInitiatedAction) && (\n                            <div className={cx(\"alert\", `alert-${message.type}`)}>\n                                {message.type === \"success\" && <span className={cx(props.kcFeedbackSuccessIcon)}></span>}\n                                {message.type === \"warning\" && <span className={cx(props.kcFeedbackWarningIcon)}></span>}\n                                {message.type === \"error\" && <span className={cx(props.kcFeedbackErrorIcon)}></span>}\n                                {message.type === \"info\" && <span className={cx(props.kcFeedbackInfoIcon)}></span>}\n                                <span\n                                    className=\"kc-feedback-text\"\n                                    dangerouslySetInnerHTML={{\n                                        \"__html\": message.summary,\n                                    }}\n                                />\n                            </div>\n                        )}\n                        {formNode}\n                        {auth !== undefined && auth.showTryAnotherWayLink && showAnotherWayIfPresent && (\n                            <form\n                                id=\"kc-select-try-another-way-form\"\n                                action={url.loginAction}\n                                method=\"post\"\n                                className={cx(displayWide && props.kcContentWrapperClass)}\n                            >\n                                <div className={cx(displayWide && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass])}>\n                                    <div className={cx(props.kcFormGroupClass)}>\n                                        <input type=\"hidden\" name=\"tryAnotherWay\" value=\"on\" />\n                                        <a href=\"#\" id=\"try-another-way\" onClick={onTryAnotherWayClick}>\n                                            {msg(\"doTryAnotherWay\")}\n                                        </a>\n                                    </div>\n                                </div>\n                            </form>\n                        )}\n                        {displayInfo && (\n                            <div id=\"kc-info\" className={cx(props.kcSignUpClass)}>\n                                <div id=\"kc-info-wrapper\" className={cx(props.kcInfoAreaWrapperClass)}>\n                                    {infoNode}\n                                </div>\n                            </div>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n});\n","import React, { PropsWithChildren, useState } from 'react';\nimport { InputProps } from './Input.types';\nimport styles from './Input.module.scss';\nimport classNames from 'classnames';\n\nconst Input: React.FC<InputProps> = ((props: PropsWithChildren<InputProps>) => {\n  const { tabIndex, name, type, value, onChange, placeholder, disabled, onFocus = () => {}, onBlur = () => {}, id = ''  } = props;\n\n  const [isFocused, setIsFocused] = useState(false);\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>): void => {\n    onFocus?.(event);\n    setIsFocused(true);\n  };\n  const handleBlur = (event: React.FocusEvent<HTMLInputElement>): void => {\n    onBlur?.(event);\n    setIsFocused(false);\n  };\n\n  const rootClass = classNames(styles.root);\n  const placeholderClass = classNames(styles.placeholder, {\n    [styles.focus]: isFocused || value,\n  });\n  const inputClass = classNames(styles.input);\n\n  const otherProps: { tabIndex?: number; name?: string; id?: string; value?: InputProps['value']; onChange?: InputProps['onChange'] } = {};\n  if (id) otherProps.id = id;\n  if (name) otherProps.name = name;\n  if (tabIndex) otherProps.tabIndex = tabIndex;\n  // if (value) otherProps.value = value;\n  // if (onChange) otherProps.onChange = onChange;\n\n  return (\n    <div className={rootClass}>\n      {placeholder && <span className={placeholderClass}>{placeholder}</span>}\n      <input\n        {...otherProps}\n        className={inputClass}\n        type={type}\n        value={value}\n        onChange={onChange}\n        disabled={disabled}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n    </div>\n  );\n});\nInput.defaultProps = {\n  placeholder: '',\n  disabled: false,\n};\n\nexport default React.memo(Input);\n","import { useState, memo, useCallback, ChangeEvent } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\nimport { useConstCallback } from \"powerhooks/useConstCallback\";\nimport { Input } from '../components/Input';\n\nexport const Login = memo(({ kcContext, ...props }: { kcContext: KcContextBase.Login } & KcProps) => {\n    const { social, realm, url, usernameEditDisabled, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = useKcMessage();\n\n    const { cx } = useCssAndCx();\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback(() => (setIsLoginButtonDisabled(true), true));\n\n    const [username, setUsername] = useState('');\n    const changeUsername = (event: ChangeEvent<HTMLInputElement>) => setUsername(event.target.value);\n    const placeholderU = !realm.loginWithEmailAllowed\n      ? \"username\"\n      : !realm.registrationEmailAsUsername\n        ? \"usernameOrEmail\"\n        : \"email\";\n\n  const [password, setPassword] = useState('');\n  const changePassword = (event: ChangeEvent<HTMLInputElement>) => setPassword(event.target.value);\n  const placeholderP = \"password\";\n  //\n  // const onClick = useCallback(async () => {\n  //   const body = new FormData();\n  //   const FD: { username: string; password: string } = { username, password };\n  //   (Object.keys(FD) as Array<keyof typeof FD>).forEach((key) => {\n  //     body.append(key, FD[key]);\n  //   });\n  //   const response = await fetch(url.loginAction, { method: 'POST', body, headers: {} });\n  //   const data = await response.json();\n  //   console.log('data', data);\n  //   if (response.ok) onSubmit();\n  // }, []);\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <div id=\"kc-form\" className={cx(realm.password && social.providers !== undefined && props.kcContentWrapperClass)}>\n                    <div\n                        id=\"kc-form-wrapper\"\n                        className={cx(realm.password && social.providers && [props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass])}\n                    >\n                        {realm.password && (\n                            <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                              <Input\n                                tabIndex={1}\n                                id=\"username\"\n                                name=\"username\"\n                                type={'text'}\n                                placeholder={placeholderU}\n                                value={username}\n                                onChange={changeUsername}\n                              />\n                              {/*  <div className={cx(props.kcFormGroupClass)}>*/}\n                              {/*      <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>*/}\n                              {/*          {!realm.loginWithEmailAllowed*/}\n                              {/*              ? msg(\"username\")*/}\n                              {/*              : !realm.registrationEmailAsUsername*/}\n                              {/*              ? msg(\"usernameOrEmail\")*/}\n                              {/*              : msg(\"email\")}*/}\n                              {/*      </label>*/}\n                              {/*      <input*/}\n                              {/*          tabIndex={1}*/}\n                              {/*          id=\"username\"*/}\n                              {/*          // className={cx(props.kcInputClass)}*/}\n                              {/*          name=\"username\"*/}\n                              {/*          defaultValue={login.username ?? \"\"}*/}\n                              {/*          type=\"text\"*/}\n                              {/*          {...(usernameEditDisabled*/}\n                              {/*              ? { \"disabled\": true }*/}\n                              {/*              : {*/}\n                              {/*                    \"autoFocus\": true,*/}\n                              {/*                    \"autoComplete\": \"off\",*/}\n                              {/*                })}*/}\n                              {/*      />*/}\n                              {/*  </div>*/}\n                              <Input\n                                tabIndex={2}\n                                id=\"password\"\n                                name=\"password\"\n                                type={'text'}\n                                placeholder={placeholderP}\n                                value={password}\n                                onChange={changePassword}\n                              />\n                              {/*  <div className={cx(props.kcFormGroupClass)}>*/}\n                              {/*      <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>*/}\n                              {/*          {msg(\"password\")}*/}\n                              {/*      </label>*/}\n                              {/*      <input*/}\n                              {/*          tabIndex={2}*/}\n                              {/*          id=\"password\"*/}\n                              {/*          className={cx(props.kcInputClass)}*/}\n                              {/*          name=\"password\"*/}\n                              {/*          type=\"password\"*/}\n                              {/*          autoComplete=\"off\"*/}\n                              {/*      />*/}\n                              {/*  </div>*/}\n                                <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                                    <div id=\"kc-form-options\">\n                                        {realm.rememberMe && !usernameEditDisabled && (\n                                            <div className=\"checkbox\">\n                                                <label>\n                                                    <input\n                                                        tabIndex={3}\n                                                        id=\"rememberMe\"\n                                                        name=\"rememberMe\"\n                                                        type=\"checkbox\"\n                                                        {...(login.rememberMe\n                                                            ? {\n                                                                  \"checked\": true,\n                                                              }\n                                                            : {})}\n                                                    />\n                                                    {msg(\"rememberMe\")}\n                                                </label>\n                                            </div>\n                                        )}\n                                    </div>\n                                    <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                        {realm.resetPasswordAllowed && (\n                                            <span>\n                                                <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                    {msg(\"doForgotPassword\")}\n                                                </a>\n                                            </span>\n                                        )}\n                                    </div>\n                                </div>\n                              {/*<button type={'submit'} onSubmit={onClick}>Вход</button>*/}\n                                <div id=\"kc-form-buttons\" className={cx(props.kcFormGroupClass)}>\n                                    <input\n                                        type=\"hidden\"\n                                        id=\"id-hidden-input\"\n                                        name=\"credentialId\"\n                                        {...(auth?.selectedCredential !== undefined\n                                            ? {\n                                                  \"value\": auth.selectedCredential,\n                                              }\n                                            : {})}\n                                    />\n                                    <input\n                                        tabIndex={4}\n                                        className={cx(\n                                            props.kcButtonClass,\n                                            props.kcButtonPrimaryClass,\n                                            props.kcButtonBlockClass,\n                                            props.kcButtonLargeClass,\n                                        )}\n                                        name=\"login\"\n                                        id=\"kc-login\"\n                                        type=\"submit\"\n                                        value={msgStr(\"doLogIn\")}\n                                        disabled={isLoginButtonDisabled}\n                                    />\n                                </div>\n                            </form>\n                        )}\n                    </div>\n                    {realm.password && social.providers !== undefined && (\n                        <div id=\"kc-social-providers\" className={cx(props.kcFormSocialAccountContentClass, props.kcFormSocialAccountClass)}>\n                            <ul\n                                className={cx(\n                                    props.kcFormSocialAccountListClass,\n                                    social.providers.length > 4 && props.kcFormSocialAccountDoubleListClass,\n                                )}\n                            >\n                                {social.providers.map(p => (\n                                    <li key={p.providerId} className={cx(props.kcFormSocialAccountListLinkClass)}>\n                                        <a href={p.loginUrl} id={`zocial-${p.alias}`} className={cx(\"zocial\", p.providerId)}>\n                                            <span>{p.displayName}</span>\n                                        </a>\n                                    </li>\n                                ))}\n                            </ul>\n                        </div>\n                    )}\n                </div>\n            }\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        />\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport const Register = memo(({ kcContext, ...props }: { kcContext: KcContextBase.Register } & KcProps) => {\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = useKcMessage();\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"firstName\"\n                                defaultValue={register.formData.firstName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"lastName\"\n                                className={cx(props.kcInputClass)}\n                                name=\"lastName\"\n                                defaultValue={register.formData.lastName ?? \"\"}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={cx(props.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"email\"\n                                className={cx(props.kcInputClass)}\n                                name=\"email\"\n                                defaultValue={register.formData.email ?? \"\"}\n                                autoComplete=\"email\"\n                            />\n                        </div>\n                    </div>\n                    {!realm.registrationEmailAsUsername && (\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    className={cx(props.kcInputClass)}\n                                    name=\"username\"\n                                    defaultValue={register.formData.username ?? \"\"}\n                                    autoComplete=\"username\"\n                                />\n                            </div>\n                        </div>\n                    )}\n                    {passwordRequired && (\n                        <>\n                            <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"password\", props.kcFormGroupErrorClass))}>\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"password\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input\n                                        type=\"password\"\n                                        id=\"password\"\n                                        className={cx(props.kcInputClass)}\n                                        name=\"password\"\n                                        autoComplete=\"new-password\"\n                                    />\n                                </div>\n                            </div>\n\n                            <div\n                                className={cx(\n                                    props.kcFormGroupClass,\n                                    messagesPerField.printIfExists(\"password-confirm\", props.kcFormGroupErrorClass),\n                                )}\n                            >\n                                <div className={cx(props.kcLabelWrapperClass)}>\n                                    <label htmlFor=\"password-confirm\" className={cx(props.kcLabelClass)}>\n                                        {msg(\"passwordConfirm\")}\n                                    </label>\n                                </div>\n                                <div className={cx(props.kcInputWrapperClass)}>\n                                    <input type=\"password\" id=\"password-confirm\" className={cx(props.kcInputClass)} name=\"password-confirm\" />\n                                </div>\n                            </div>\n                        </>\n                    )}\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n","import { useMemo, memo, useEffect, useState, Fragment, FC, ComponentClass } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase, Attribute } from \"keycloakify\";\nimport { useKcMessage, useFormValidationSlice } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\nimport { useCallbackFactory } from \"powerhooks/useCallbackFactory\";\n\ntype ReactComponent<Props extends Record<string, unknown> = {}> = ((props: Props) => ReturnType<FC>) | ComponentClass<Props>;\n\nexport const RegisterUserProfile = memo(({ kcContext, ...props_ }: { kcContext: KcContextBase.RegisterUserProfile } & KcProps) => {\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = useKcMessage();\n\n    const { cx, css } = useCssAndCx();\n\n    const props = useMemo(\n        () => ({\n            ...props_,\n            \"kcFormGroupClass\": cx(props_.kcFormGroupClass, css({ \"marginBottom\": 20 })),\n        }),\n        [cx, css],\n    );\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"registerTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" className={cx(props.kcFormClass)} action={url.registrationAction} method=\"post\">\n                    <UserProfileFormFields kcContext={kcContext} onIsFormSubmittableValueChange={setIsFomSubmittable} {...props} />\n                    {recaptchaRequired && (\n                        <div className=\"form-group\">\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doRegister\")}\n                                disabled={!isFomSubmittable}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\ntype UserProfileFormFieldsProps = { kcContext: KcContextBase.RegisterUserProfile } & KcProps &\n    Partial<Record<\"BeforeField\" | \"AfterField\", ReactComponent<{ attribute: Attribute }>>> & {\n        onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    };\n\nconst UserProfileFormFields = memo(({ kcContext, onIsFormSubmittableValueChange, ...props }: UserProfileFormFieldsProps) => {\n    const { cx, css } = useCssAndCx();\n\n    const { advancedMsg } = useKcMessage();\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationReducer,\n        attributesWithPassword,\n    } = useFormValidationSlice({\n        kcContext,\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    const onChangeFactory = useCallbackFactory(\n        (\n            [name]: [string],\n            [\n                {\n                    target: { value },\n                },\n            ]: [React.ChangeEvent<HTMLInputElement>],\n        ) =>\n            formValidationReducer({\n                \"action\": \"update value\",\n                name,\n                \"newValue\": value,\n            }),\n    );\n\n    const onBlurFactory = useCallbackFactory(([name]: [string]) =>\n        formValidationReducer({\n            \"action\": \"focus lost\",\n            name,\n        }),\n    );\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = cx(props.kcFormGroupClass, displayableErrors.length !== 0 && props.kcFormGroupErrorClass);\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={cx(props.kcContentWrapperClass)}>\n                                    <label id={`header-${group}`} className={cx(props.kcFormGroupHeader)}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={cx(props.kcLabelWrapperClass)}>\n                                        <label id={`description-${group}`} className={`${cx(props.kcLabelClass)}`}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                        <div className={formGroupClassName}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor={attribute.name} className={cx(props.kcLabelClass)}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    autoComplete={(() => {\n                                        switch (attribute.name) {\n                                            case \"password-confirm\":\n                                            case \"password\":\n                                                return \"new-password\";\n                                            default:\n                                                return undefined;\n                                        }\n                                    })()}\n                                    type={(() => {\n                                        switch (attribute.name) {\n                                            case \"password-confirm\":\n                                            case \"password\":\n                                                return \"password\";\n                                            default:\n                                                return \"text\";\n                                        }\n                                    })()}\n                                    id={attribute.name}\n                                    name={attribute.name}\n                                    value={value}\n                                    onChange={onChangeFactory(attribute.name)}\n                                    className={cx(props.kcInputClass)}\n                                    aria-invalid={displayableErrors.length !== 0}\n                                    disabled={attribute.readOnly}\n                                    {...(attribute.autocomplete === undefined\n                                        ? {}\n                                        : {\n                                              \"autoComplete\": attribute.autocomplete,\n                                          })}\n                                    onBlur={onBlurFactory(attribute.name)}\n                                />\n                                {displayableErrors.length !== 0 && (\n                                    <span\n                                        id={`input-error-${attribute.name}`}\n                                        className={cx(\n                                            props.kcInputErrorMessageClass,\n                                            css({\n                                                \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined,\n                                                \"& > span\": { \"display\": \"block\" },\n                                            }),\n                                        )}\n                                        aria-live=\"polite\"\n                                    >\n                                        {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                    </span>\n                                )}\n                            </div>\n                        </div>\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { assert, useKcMessage } from \"keycloakify\";\n\nexport const Info = memo(({ kcContext, ...props }: { kcContext: KcContextBase.Info } & KcProps) => {\n    const { msg } = useKcMessage();\n\n    assert(kcContext.message !== undefined);\n\n    const { messageHeader, message, requiredActions, skipLink, pageRedirectUri, actionUri, client } = kcContext;\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={messageHeader !== undefined ? <>{messageHeader}</> : <>{message.summary}</>}\n            formNode={\n                <div id=\"kc-info-message\">\n                    <p className=\"instruction\">\n                        {message.summary}\n\n                        {requiredActions !== undefined && (\n                            <b>{requiredActions.map(requiredAction => msg(`requiredAction.${requiredAction}` as const)).join(\",\")}</b>\n                        )}\n                    </p>\n                    {!skipLink && pageRedirectUri !== undefined ? (\n                        <p>\n                            <a href={pageRedirectUri}>{msg(\"backToApplication\")}</a>\n                        </p>\n                    ) : actionUri !== undefined ? (\n                        <p>\n                            <a href={actionUri}>{msg(\"proceedWithAction\")}</a>\n                        </p>\n                    ) : (\n                        client.baseUrl !== undefined && (\n                            <p>\n                                <a href={client.baseUrl}>{msg(\"backToApplication\")}</a>\n                            </p>\n                        )\n                    )}\n                </div>\n            }\n        />\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\n\nexport const Error = memo(({ kcContext, ...props }: { kcContext: KcContextBase.Error } & KcProps) => {\n    const { msg } = useKcMessage();\n\n    const { message, client } = kcContext;\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={msg(\"errorTitle\")}\n            formNode={\n                <div id=\"kc-error-message\">\n                    <p className=\"instruction\">{message.summary}</p>\n                    {client !== undefined && client.baseUrl !== undefined && (\n                        <p>\n                            <a id=\"backToApplication\" href={client.baseUrl}>\n                                {msg(\"backToApplication\")}\n                            </a>\n                        </p>\n                    )}\n                </div>\n            }\n        />\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport const LoginResetPassword = memo(({ kcContext, ...props }: { kcContext: KcContextBase.LoginResetPassword } & KcProps) => {\n    const { url, realm, auth } = kcContext;\n\n    const { msg, msgStr } = useKcMessage();\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={msg(\"emailForgotTitle\")}\n            formNode={\n                <form id=\"kc-reset-password-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                {!realm.loginWithEmailAllowed\n                                    ? msg(\"username\")\n                                    : !realm.registrationEmailAsUsername\n                                    ? msg(\"usernameOrEmail\")\n                                    : msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={cx(props.kcInputClass)}\n                                autoFocus\n                                defaultValue={auth !== undefined && auth.showUsername ? auth.attemptedUsername : undefined}\n                            />\n                        </div>\n                    </div>\n                    <div className={cx(props.kcFormGroupClass, props.kcFormSettingClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)}>\n                                <span>\n                                    <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                                </span>\n                            </div>\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                type=\"submit\"\n                                value={msgStr(\"doSubmit\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n            infoNode={msg(\"emailInstruction\")}\n        />\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\n\nexport const LoginVerifyEmail = memo(({ kcContext, ...props }: { kcContext: KcContextBase.LoginVerifyEmail } & KcProps) => {\n    const { msg } = useKcMessage();\n\n    const { url } = kcContext;\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={msg(\"emailVerifyTitle\")}\n            formNode={\n                <>\n                    <p className=\"instruction\">{msg(\"emailVerifyInstruction1\")}</p>\n                    <p className=\"instruction\">\n                        {msg(\"emailVerifyInstruction2\")}\n                        <a href={url.loginAction}>{msg(\"doClickHere\")}</a>\n                        {msg(\"emailVerifyInstruction3\")}\n                    </p>\n                </>\n            }\n        />\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport const Terms = memo(({ kcContext, ...props }: { kcContext: KcContextBase.Terms } & KcProps) => {\n    const { msg, msgStr } = useKcMessage();\n\n    const { cx } = useCssAndCx();\n\n    const { url } = kcContext;\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            displayMessage={false}\n            headerNode={msg(\"termsTitle\")}\n            formNode={\n                <>\n                    <div id=\"kc-terms-text\">{msg(\"termsText\")}</div>\n                    <form className=\"form-actions\" action={url.loginAction} method=\"POST\">\n                        <input\n                            className={cx(\n                                props.kcButtonClass,\n                                props.kcButtonClass,\n                                props.kcButtonClass,\n                                props.kcButtonPrimaryClass,\n                                props.kcButtonLargeClass,\n                            )}\n                            name=\"accept\"\n                            id=\"kc-accept\"\n                            type=\"submit\"\n                            value={msgStr(\"doAccept\")}\n                        />\n                        <input\n                            className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonLargeClass)}\n                            name=\"cancel\"\n                            id=\"kc-decline\"\n                            type=\"submit\"\n                            value={msgStr(\"doDecline\")}\n                        />\n                    </form>\n                    <div className=\"clearfix\" />\n                </>\n            }\n        />\n    );\n});\n","import { useEffect, memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { headInsert } from \"../utils\";\nimport { join as pathJoin } from \"path\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport const LoginOtp = memo(({ kcContext, ...props }: { kcContext: KcContextBase.LoginOtp } & KcProps) => {\n    const { otpLogin, url } = kcContext;\n\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = useKcMessage();\n\n    useEffect(() => {\n        let isCleanedUp = false;\n\n        headInsert({\n            \"type\": \"javascript\",\n            \"src\": pathJoin(kcContext.url.resourcesCommonPath, \"node_modules/jquery/dist/jquery.min.js\"),\n        }).then(() => {\n            if (isCleanedUp) return;\n\n            evaluateInlineScript();\n        });\n\n        return () => {\n            isCleanedUp = true;\n        };\n    }, []);\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"doLogIn\")}\n            formNode={\n                <form id=\"kc-otp-login-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    {otpLogin.userOtpCredentials.length > 1 && (\n                        <div className={cx(props.kcFormGroupClass)}>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                {otpLogin.userOtpCredentials.map(otpCredential => (\n                                    <div key={otpCredential.id} className={cx(props.kcSelectOTPListClass)}>\n                                        <input type=\"hidden\" value=\"${otpCredential.id}\" />\n                                        <div className={cx(props.kcSelectOTPListItemClass)}>\n                                            <span className={cx(props.kcAuthenticatorOtpCircleClass)} />\n                                            <h2 className={cx(props.kcSelectOTPItemHeadingClass)}>{otpCredential.userLabel}</h2>\n                                        </div>\n                                    </div>\n                                ))}\n                            </div>\n                        </div>\n                    )}\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"otp\" className={cx(props.kcLabelClass)}>\n                                {msg(\"loginOtpOneTime\")}\n                            </label>\n                        </div>\n\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input id=\"otp\" name=\"otp\" autoComplete=\"off\" type=\"text\" className={cx(props.kcInputClass)} autoFocus />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)} />\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            <input\n                                className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                                name=\"login\"\n                                id=\"kc-login\"\n                                type=\"submit\"\n                                value={msgStr(\"doLogIn\")}\n                            />\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n\ndeclare const $: any;\n\nfunction evaluateInlineScript() {\n    $(document).ready(function () {\n        // Card Single Select\n        $(\".card-pf-view-single-select\").click(function (this: any) {\n            if ($(this).hasClass(\"active\")) {\n                $(this).removeClass(\"active\");\n                $(this).children().removeAttr(\"name\");\n            } else {\n                $(\".card-pf-view-single-select\").removeClass(\"active\");\n                $(\".card-pf-view-single-select\").children().removeAttr(\"name\");\n                $(this).addClass(\"active\");\n                $(this).children().attr(\"name\", \"selectedCredentialId\");\n            }\n        });\n\n        var defaultCred = $(\".card-pf-view-single-select\")[0];\n        if (defaultCred) {\n            defaultCred.click();\n        }\n    });\n}\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport const LoginUpdateProfile = memo(({ kcContext, ...props }: { kcContext: KcContextBase.LoginUpdateProfile } & KcProps) => {\n    const { cx } = useCssAndCx();\n\n    const { msg, msgStr } = useKcMessage();\n\n    const { url, user, messagesPerField, isAppInitiatedAction } = kcContext;\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"loginProfileTitle\")}\n            formNode={\n                <form id=\"kc-update-profile-form\" className={cx(props.kcFormClass)} action={url.loginAction} method=\"post\">\n                    {user.editUsernameAllowed && (\n                        <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"username\", props.kcFormGroupErrorClass))}>\n                            <div className={cx(props.kcLabelWrapperClass)}>\n                                <label htmlFor=\"username\" className={cx(props.kcLabelClass)}>\n                                    {msg(\"username\")}\n                                </label>\n                            </div>\n                            <div className={cx(props.kcInputWrapperClass)}>\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    name=\"username\"\n                                    defaultValue={user.username ?? \"\"}\n                                    className={cx(props.kcInputClass)}\n                                />\n                            </div>\n                        </div>\n                    )}\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"email\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"email\" className={cx(props.kcLabelClass)}>\n                                {msg(\"email\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input type=\"text\" id=\"email\" name=\"email\" defaultValue={user.email ?? \"\"} className={cx(props.kcInputClass)} />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"firstName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"firstName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"firstName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input\n                                type=\"text\"\n                                id=\"firstName\"\n                                name=\"firstName\"\n                                defaultValue={user.firstName ?? \"\"}\n                                className={cx(props.kcInputClass)}\n                            />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass, messagesPerField.printIfExists(\"lastName\", props.kcFormGroupErrorClass))}>\n                        <div className={cx(props.kcLabelWrapperClass)}>\n                            <label htmlFor=\"lastName\" className={cx(props.kcLabelClass)}>\n                                {msg(\"lastName\")}\n                            </label>\n                        </div>\n                        <div className={cx(props.kcInputWrapperClass)}>\n                            <input type=\"text\" id=\"lastName\" name=\"lastName\" defaultValue={user.lastName ?? \"\"} className={cx(props.kcInputClass)} />\n                        </div>\n                    </div>\n\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <div id=\"kc-form-options\" className={cx(props.kcFormOptionsClass)}>\n                            <div className={cx(props.kcFormOptionsWrapperClass)} />\n                        </div>\n\n                        <div id=\"kc-form-buttons\" className={cx(props.kcFormButtonsClass)}>\n                            {isAppInitiatedAction ? (\n                                <>\n                                    <input\n                                        className={cx(props.kcButtonClass, props.kcButtonPrimaryClass, props.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        defaultValue={msgStr(\"doSubmit\")}\n                                    />\n                                    <button\n                                        className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonLargeClass)}\n                                        type=\"submit\"\n                                        name=\"cancel-aia\"\n                                        value=\"true\"\n                                    >\n                                        {msg(\"doCancel\")}\n                                    </button>\n                                </>\n                            ) : (\n                                <input\n                                    className={cx(\n                                        props.kcButtonClass,\n                                        props.kcButtonPrimaryClass,\n                                        props.kcButtonBlockClass,\n                                        props.kcButtonLargeClass,\n                                    )}\n                                    type=\"submit\"\n                                    defaultValue={msgStr(\"doSubmit\")}\n                                />\n                            )}\n                        </div>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n","import { memo } from \"react\";\nimport { Template } from \"./Template\";\nimport type { KcProps, KcContextBase } from \"keycloakify\";\nimport { useKcMessage } from \"keycloakify\";\nimport { useCssAndCx } from \"tss-react\";\n\nexport const LoginIdpLinkConfirm = memo(({ kcContext, ...props }: { kcContext: KcContextBase.LoginIdpLinkConfirm } & KcProps) => {\n    const { url, idpAlias } = kcContext;\n\n    const { msg } = useKcMessage();\n\n    const { cx } = useCssAndCx();\n\n    return (\n        <Template\n            {...{ kcContext, ...props }}\n            doFetchDefaultThemeResources={true}\n            headerNode={msg(\"confirmLinkIdpTitle\")}\n            formNode={\n                <form id=\"kc-register-form\" action={url.loginAction} method=\"post\">\n                    <div className={cx(props.kcFormGroupClass)}>\n                        <button\n                            type=\"submit\"\n                            className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                            name=\"submitAction\"\n                            id=\"updateProfile\"\n                            value=\"updateProfile\"\n                        >\n                            {msg(\"confirmLinkIdpReviewProfile\")}\n                        </button>\n                        <button\n                            type=\"submit\"\n                            className={cx(props.kcButtonClass, props.kcButtonDefaultClass, props.kcButtonBlockClass, props.kcButtonLargeClass)}\n                            name=\"submitAction\"\n                            id=\"linkAccount\"\n                            value=\"linkAccount\"\n                        >\n                            {msg(\"confirmLinkIdpContinue\", idpAlias)}\n                        </button>\n                    </div>\n                </form>\n            }\n        />\n    );\n});\n","import { memo } from \"react\";\nimport type { KcContextBase, KcProps } from \"keycloakify\";\nimport { Login } from \"./Login\";\nimport { Register } from \"./Register\";\nimport { RegisterUserProfile } from \"./RegisterUserProfile\";\nimport { Info } from \"./Info\";\nimport { Error } from \"./Error\";\nimport { LoginResetPassword } from \"./LoginResetPassword\";\nimport { LoginVerifyEmail } from \"./LoginVerifyEmail\";\nimport { Terms } from \"./Terms\";\nimport { LoginOtp } from \"./LoginOtp\";\nimport { LoginUpdateProfile } from \"./LoginUpdateProfile\";\nimport { LoginIdpLinkConfirm } from \"./LoginIdpLinkConfirm\";\n\nexport const KcApp = memo(({ kcContext, ...props }: { kcContext: KcContextBase } & KcProps) => {\n    switch (kcContext.pageId) {\n        case \"login.ftl\":\n            return <Login {...{ kcContext, ...props }} />;\n        case \"register.ftl\":\n            return <Register {...{ kcContext, ...props }} />;\n        case \"register-user-profile.ftl\":\n            return <RegisterUserProfile {...{ kcContext, ...props }} />;\n        case \"info.ftl\":\n            return <Info {...{ kcContext, ...props }} />;\n        case \"error.ftl\":\n            return <Error {...{ kcContext, ...props }} />;\n        case \"login-reset-password.ftl\":\n            return <LoginResetPassword {...{ kcContext, ...props }} />;\n        case \"login-verify-email.ftl\":\n            return <LoginVerifyEmail {...{ kcContext, ...props }} />;\n        case \"terms.ftl\":\n            return <Terms {...{ kcContext, ...props }} />;\n        case \"login-otp.ftl\":\n            return <LoginOtp {...{ kcContext, ...props }} />;\n        case \"login-update-profile.ftl\":\n            return <LoginUpdateProfile {...{ kcContext, ...props }} />;\n        case \"login-idp-link-confirm.ftl\":\n            return <LoginIdpLinkConfirm {...{ kcContext, ...props }} />;\n    }\n});\n","import { useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.scss\";\n// import { App } from \"./App\";\nimport {\n  // KcApp as KcAppBase,\n  defaultKcProps,\n  getKcContext,\n  kcMessages,\n  useKcLanguageTag\n} from \"keycloakify\";\nimport tos_en_url from \"./tos_en.md\";\nimport tos_fr_url from \"./tos_fr.md\";\nimport \"./kcMessagesExtension\";\nimport { KcApp as KcAppBase } from './pages/KcApp';\n\nconst { kcContext } = getKcContext({\n  /* Uncomment to test th<e login page for development */\n  //\"mockPageId\": \"login.ftl\"\n});\n\nif (kcContext !== undefined) {\n  console.log(kcContext);\n}\n\nrender(\n  kcContext === undefined ? <div>error</div> : <KcApp />,\n  document.getElementById(\"root\")\n);\n\n// render(\n//   kcContext === undefined ?\n//     <App /> :\n//     <KcApp />,\n//   document.getElementById(\"root\")\n// );\n\nfunction KcApp() {\n\n  if (kcContext === undefined) {\n    throw new Error();\n  }\n\n  const { kcLanguageTag } = useKcLanguageTag();\n\n  //Lazily download the therms and conditions in the appropriate language\n  //if we are on the terms.ftl page.\n  useEffect(\n    () => {\n\n      if (kcContext!.pageId !== \"terms.ftl\") {\n        return;\n      }\n\n      kcMessages[kcLanguageTag].termsTitle = \"\";\n\n      fetch((() => {\n        switch (kcLanguageTag) {\n          case \"fr\": return tos_fr_url;\n          default: return tos_en_url;\n        }\n      })())\n        .then(response => response.text())\n        .then(rawMarkdown => kcMessages[kcLanguageTag].termsText = rawMarkdown);\n\n    },\n    [kcLanguageTag]\n  );\n\n  return (\n      <KcAppBase\n        kcContext={kcContext}\n        {...{...defaultKcProps}}\n      />\n  );\n}\n"],"sourceRoot":""}